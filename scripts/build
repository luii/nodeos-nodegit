#!/usr/bin/env bash

TOOLCHAIN=`node -p "require('nodeos-cross-toolchain')"` || exit 1
NODE_DIR=`node -p "require('nodeos-nodejs')"` || exit 2

source $TOOLCHAIN/scripts/adjustEnvVars.sh || exit $?

# Set the PATH variable
PATH=$TOOLCHAIN/bin:$PATH

# Build cross-compiler (if needed)
(
  cd $TOOLCHAIN
  BITS=$BITS CPU=$CPU MACHINE=$MACHINE npm install --production || exit $?
) || exit $?

NODE_VERSION=v`node -p "require('${NODE_DIR}/package.json').version"`
NODEGIT_VERSION=`node -p "require('./package.json').nodegitVersion"`
NODEGIT_URL=https://codeload.github.com/nodegit/nodegit/tar.gz/v${NODEGIT_VERSION}
LIBGIT2_URL=https://codeload.github.com/nodegit/libgit2/tar.gz/da12bb8
NODEOS_LIBCURL=https://codeload.github.com/luii/nodeos-libcurl/tar.gz/99a221c

# If not defined, define JOBS and get the amount of cores
# of your cpu and add 1 to it for n+1 Jobs
if [[ -z $JOBS ]]; then
  JOBS=$((`getconf _NPROCESSORS_ONLN` + 1))  
fi

# remove a array like list of strings recursivly
function rmStep() {
  rm -rf "$@"
}

function err() {
  rmStep $STEP_DIR
  exit $1
}

#
# Download nodegit
#

OUT_DIR=`pwd`
SRC_DIR=`pwd`/deps/nodegit
PREBUILD=$OUT_DIR/prebuilds

echo -e "${NWL}${GRN}Download nodegit${CLR}${NWL}"

STEP_DIR=$SRC_DIR

if [[ ! -d $STEP_DIR ]]; then
  mkdir -p $STEP_DIR || exit 3 # create deps/nodegit if not exist

  rmStep $OUT_DIR/build $OUT_DIR/dist

  #
  # Download nodegit via url and unpack the tar.gz to $STEP_DIR stripping the
  # base folder (in this case "nodegit")
  #
  curl $NODEGIT_URL | tar -xz --strip-components=1 -C $STEP_DIR || err 4 # download and extract into $STEP_DIR

  cd $STEP_DIR

  # patching binding.gyp to allow a static libcurl dependency instead of a shared
  # because we cant use shared dependencies for now in nodeos
  patch -p1 < $OUT_DIR/resources/0001-Use-static-libcurl.patch || err 55
fi

#
# Install only nodegit dependencies
#

echo -e "${NWL}${GRN}Installing dependencies in $STEP_DIR ${CLR}${NWL}"

STEP_DIR=$SRC_DIR

if [[ ! -f $STEP_DIR/binding.gyp ]]; then
  (
    # We need to do this because we need the devDependencies
    # for the build process to work
    OLD_NODE_ENV=$NODE_ENV
       
    #
    # Move into the $STEP_DIR and install only the dependencies with
    # the correct arch and nodedir, after running all the neccassary scripts
    # to create our nodegit module
    #
    cd $STEP_DIR                                           &&
    NODE_ENV="development" npm install --ignore-scripts     \
                                       --arch=$NODE_ARCH    \
                                       --nodedir=$NODE_DIR  \
                                       --jobs=$JOBS        &&
    npm run generateJson                                   &&
    npm run generateMissingTests                           &&
    npm run generateNativeCode || exit 5

    # resetting to the old value
    NODE_ENV=$OLD_NODE_ENV
  )
fi

#
# Download nodeos-libcurl and place it inside vendor/ folder inside of nodegit
# therefor its easyier to navigate and copy some stuff for later
#
echo -e "${NWL}${GRN}Downloading nodeos-libcurl${CLR}${NWL}"

VENDOR_DIR=$SRC_DIR/vendor
NODEOS_LIBCURL_DIR=$VENDOR_DIR/nodeos-libcurl
STEP_DIR=$NODEOS_LIBCURL_DIR

if [[ ! -d $STEP_DIR ]]; then

  mkdir $STEP_DIR || exit 50

  curl $NODEOS_LIBCURL | tar -xz --strip-components=1 -C $STEP_DIR || err 51
fi

#
# Configure and build nodeos-libcurl
#

echo -e "${NWL}${GRN}Configure nodeos-libcurl${CLR}${NWL}"

STEP_DIR=$NODEOS_LIBCURL_DIR

# We need to build libcurl.a for nodeos so were using the nodeos-libcurl
# package to have it preconfigured

if [[ -d $STEP_DIR ]]; then 
  (
    cd $STEP_DIR || exit 52

    npm install || exit 53
 
    # copy $NODEOS_LIBCURL_DIR/lib/libcurl.a into the vendor/ dir so we can link it
    # additionally we patch up the libgit2.gyp file
    cp -ar $NODEOS_LIBCURL_DIR/out/$CPU/lib/libcurl.a $VENDOR_DIR || exit 54
  )
fi

#
# Download libgit2 and place it inside the vendor/libgit2 folder
#

echo -e "${NWL}${GRN}Downloading libgit2${CLR}${NWL}"

STEP_DIR=$SRC_DIR/vendor/libgit2

if [[ -d $STEP_DIR ]]; then
  curl $LIBGIT2_URL | tar -xz --strip-components=1 -C $STEP_DIR || err 6
fi

#
# Configure libssh2 with openssl
#

echo -e "${NWL}${GRN}Configuring libssh2 with openssl${CLR}${NWL}"

OPENSSL_DIR=$SRC_DIR/vendor/openssl/openssl
OPENSSL_INC_DIR=$OPENSSL_DIR/include
LIBSSH2_DIR=$SRC_DIR/vendor/libssh2
STEP_DIR=$LIBSSH2_DIR

if [[ -d $STEP_DIR ]]; then

  (
    cd $STEP_DIR || exit 7

    CC=$TARGET-gcc
    CXX=$TARGET-g++
    CPPFLAGS+=" -I${OPENSSL_INC_DIR}"

    #
    # Run autoreconf to get rid of the missing script warning
    #
    autoreconf -fi

    #
    # Configureing libssh2 with openssl to properly build it
    #
    $STEP_DIR/configure --with-libssl-prefix=$OPENSSL_DIR \
                        --silent                          \
                        --build=$HOST                     \
                        --host=$HOST                      \
                        --target=$TARGET                  \
                        --prefix=$OUT_DIR || err 8
  )
  
fi

#
# Build nodegit
#

echo -e "${NWL}${GRN}Building Nodegit${CLR}${NWL}"

STEP_DIR=$SRC_DIR

if [[ -f $STEP_DIR/binding.gyp ]]; then
  (
    cd $STEP_DIR || exit 9
    BUILD_ONLY=1 # We need this env flag for the postinstall script to trigger

    node-gyp configure || exit 10
    node-gyp build --jobs $JOBS           \
                   --target=$NODE_VERSION \
                   --arch=$NODE_ARCH      \
                   --silent               || exit 11

    # Run babel on the build to generate the dist/ and lib/ folder
    npm run babel || exit 12

    # Clean up the build
    npm run postinstall || exit 13
  )  
fi

#
# Packing up the build
# Were copying all necessary files over to the top level dir
#

echo -e "${NWL}${GRN}Packing up the build${CLR}${NWL}"

BUILD_DIR=$OUT_DIR/build
DIST_DIR=$OUT_DIR/dist

NODEGIT_BUILD_DIR=$SRC_DIR/build/*
NODEGIT_DIST_DIR=$SRC_DIR/dist/*

# To replace the old index.js file
RESOURCES_DIR=$OUT_DIR/resources

STEP_DIR=$BUILD_DIR

if [[ ! -d $STEP_DIR ]]; then
  (
    mkdir -p $STEP_DIR || exit 14
    mkdir -p $DIST_DIR || exit 15

    cp -ar $NODEGIT_BUILD_DIR $BUILD_DIR || exit 16
    cp -ar $NODEGIT_DIST_DIR $DIST_DIR  || exit 17

    cp -a $OUT_DIR/package.json package.json.bak || exit 18
    cat $RESOURCES_DIR/package.json > $OUT_DIR/package.json || exit 19

    rmStep $OUT_DIR/deps 
  ) || exit $?
fi

echo -e "${NWL}${GRN}Generating prebuild images${CLR}${NWL}"

STEP_DIR=$PREBUILD

(
  cd $OUT_DIR        &&
  mkdir -p $STEP_DIR || exit 20
  
  NN_RUNTIME="node"
  NN_ABI=`node -p "process.versions.modules"`
  NN_PLATFORM=`node -p "process.platform"`
  NN_ARCH=$NODE_ARCH
  STEP_DIR="${STEP_DIR}/nodeos-nodegit-v${NODEGIT_VERSION}-${NN_RUNTIME}-v${NN_ABI}-${NN_PLATFORM}-${NODE_ARCH}.tar.gz"
  echo -e "${STEP_DIR}"

  tar -cf - build/ | gzip > $STEP_DIR || err 21
) || err $?
